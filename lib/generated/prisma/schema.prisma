// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma" // 根據您的要求，將 Prisma Client 生成到 lib/generated/prisma
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  role      String   @default("user")
  orders    Order[] // User 可以有多個訂單 (保留)
  reviews   Review[] // User 可以有多個評論 (保留)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id         String   @id @default(cuid())
  name       String
  price      Float
  categoryId String // 保持與 Category 的關聯 (避免 P1012 錯誤)
  stock      Int
  rating     Float    @default(0.0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id]) // 保持與 Category 的關聯
  orders   Order[] // 保持與 Order 的反向關聯 (避免 P1012 錯誤)
  reviews  Review[] // 保持與 Review 的反向關聯 (避免 P1012 錯誤)
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[] // 一個分類可以有多個產品 (保留)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String // 評論應該與 User 關聯 (保留)
  productId String
  rating    Float
  comment   String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id]) // 關聯到 User 模型 (保留)
  product Product @relation(fields: [productId], references: [id]) // (保留)
}

model Cabin {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
